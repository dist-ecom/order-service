{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/orders": {
      "post": {
        "operationId": "OrdersController_create",
        "summary": "Create a new order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The order has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "OrdersController_findAll",
        "summary": "Get all orders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/my-orders": {
      "get": {
        "operationId": "OrdersController_findMyOrders",
        "summary": "Get user orders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return user orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "operationId": "OrdersController_findOne",
        "summary": "Get order by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OrdersController_cancel",
        "summary": "Cancel order",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order has been cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/status": {
      "patch": {
        "operationId": "OrdersController_updateStatus",
        "summary": "Update order status",
        "description": "Update the status of an order. When status is changed to SHIPPED, the product stock will be decreased accordingly.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order status has been updated. If status is SHIPPED, product stock has been decreased.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User does not have admin role."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/payment-status": {
      "patch": {
        "operationId": "OrdersController_updatePaymentStatus",
        "summary": "Update order payment status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order payment status has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Order Service API",
    "description": "The Order Service API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The ID of the product",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product",
            "example": 2,
            "minimum": 1
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "The items in the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            }
          },
          "shippingAddress": {
            "type": "string",
            "description": "The shipping address for the order",
            "example": "123 Main St, Apt 4B, New York, NY 10001"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method for the order",
            "enum": [
              "credit_card",
              "debit_card",
              "paypal",
              "bank_transfer"
            ],
            "example": "credit_card"
          }
        },
        "required": [
          "items",
          "shippingAddress",
          "paymentMethod"
        ]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the order item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "productId": {
            "type": "string",
            "description": "The ID of the product",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product",
            "example": 2
          },
          "price": {
            "type": "number",
            "description": "The price of the product at the time of order",
            "example": 29.99
          },
          "name": {
            "type": "string",
            "description": "The name of the product at the time of order",
            "example": "Premium Wireless Headphones"
          },
          "orderId": {
            "type": "string",
            "description": "The ID of the order this item belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "id",
          "productId",
          "quantity",
          "price",
          "name",
          "orderId"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the order",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user who placed the order",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "items": {
            "description": "The items in the order",
            "example": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "productId": "123e4567-e89b-12d3-a456-426614174000",
                "quantity": 2,
                "price": 29.99,
                "name": "Premium Wireless Headphones",
                "orderId": "123e4567-e89b-12d3-a456-426614174000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount of the order",
            "example": 59.98,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "The current status of the order",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "delivered",
              "cancelled"
            ],
            "example": "pending"
          },
          "shippingAddress": {
            "type": "string",
            "description": "The shipping address for the order",
            "example": "123 Main St, Apt 4B, New York, NY 10001"
          },
          "trackingNumber": {
            "type": "string",
            "description": "The tracking number for the order",
            "example": "1Z999AA10123456784"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method for the order",
            "example": "credit_card",
            "enum": [
              "credit_card",
              "debit_card",
              "paypal",
              "bank_transfer"
            ]
          },
          "paymentStatus": {
            "type": "string",
            "description": "The status of the payment",
            "enum": [
              "pending",
              "paid",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "pending"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "The Stripe payment intent ID",
            "example": "pi_3NkXYZABCDEFGHIJKLMNOPQR"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time when the order was created",
            "example": "2024-03-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time when the order was last updated",
            "example": "2024-03-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "userId",
          "items",
          "totalAmount",
          "status",
          "shippingAddress",
          "paymentMethod",
          "paymentStatus",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateOrderStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The new status of the order",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "delivered",
              "cancelled"
            ],
            "example": "shipped"
          }
        },
        "required": [
          "status"
        ]
      },
      "UpdatePaymentStatusDto": {
        "type": "object",
        "properties": {
          "paymentStatus": {
            "type": "string",
            "description": "The new payment status",
            "enum": [
              "pending",
              "paid",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "completed"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "The Stripe payment intent ID",
            "example": "pi_3NkXYZABCDEFGHIJKLMNOPQR"
          }
        },
        "required": [
          "paymentStatus"
        ]
      }
    }
  }
}