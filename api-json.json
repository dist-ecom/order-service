{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/orders": {
      "post": {
        "operationId": "OrdersController_create",
        "summary": "Create a new order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The order has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "OrdersController_findAll",
        "summary": "Get all orders",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/draft": {
      "post": {
        "operationId": "OrdersController_createDraft",
        "summary": "Create a draft order (part of checkout flow)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDraftOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Draft order created successfully"
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/confirm": {
      "post": {
        "operationId": "OrdersController_confirmOrder",
        "summary": "Confirm a draft order after successful payment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order confirmed successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/expire": {
      "post": {
        "operationId": "OrdersController_expireOrder",
        "summary": "Mark a draft order as expired",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order marked as expired"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/my-orders": {
      "get": {
        "operationId": "OrdersController_findMyOrders",
        "summary": "Get user orders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return user orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "operationId": "OrdersController_findOne",
        "summary": "Get order by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OrdersController_cancel",
        "summary": "Cancel order",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order has been cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "OrdersController_update",
        "summary": "Update an order",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/status": {
      "patch": {
        "operationId": "OrdersController_updateStatus",
        "summary": "Update order status",
        "description": "Update the status of an order. When status is changed to SHIPPED, the product stock will be decreased accordingly.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order status has been updated. If status is SHIPPED, product stock has been decreased.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User does not have admin role."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/payment-status": {
      "patch": {
        "operationId": "OrdersController_updatePaymentStatus",
        "summary": "Update order payment status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order payment status has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Invalid service token."
          },
          "404": {
            "description": "Order not found."
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/details": {
      "get": {
        "operationId": "OrdersController_getOrderDetails",
        "summary": "Get order details for service-to-service communication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the order details"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    }
  },
  "info": {
    "title": "order-service",
    "description": "Order Management Service",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The ID of the product",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product",
            "example": 2,
            "minimum": 1
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "The items in the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            }
          },
          "shippingAddress": {
            "type": "string",
            "description": "The shipping address for the order",
            "example": "123 Main St, Apt 4B, New York, NY 10001"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method for the order",
            "enum": [
              "credit_card",
              "debit_card",
              "paypal",
              "bank_transfer"
            ],
            "example": "credit_card"
          }
        },
        "required": [
          "items",
          "shippingAddress",
          "paymentMethod"
        ]
      },
      "OrderResponse": {
        "type": "object",
        "properties": {}
      },
      "DraftOrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "example": 2
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CreateDraftOrderDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address",
            "example": "123 Main St, Apt 4B, New York, NY 10001"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount",
            "example": 1399.98
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata",
            "example": {
              "source": "web",
              "giftWrapping": true
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD",
            "default": "USD"
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DraftOrderItemDto"
            }
          }
        },
        "required": [
          "userId",
          "totalAmount",
          "currency",
          "items"
        ]
      },
      "UpdateOrderStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The new status of the order",
            "enum": [
              "draft",
              "pending",
              "processing",
              "shipped",
              "delivered",
              "cancelled",
              "expired"
            ],
            "example": "shipped"
          }
        },
        "required": [
          "status"
        ]
      },
      "UpdatePaymentStatusDto": {
        "type": "object",
        "properties": {
          "paymentStatus": {
            "type": "string",
            "description": "The new payment status",
            "enum": [
              "pending",
              "paid",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "completed"
          },
          "paymentIntentId": {
            "type": "string",
            "description": "The Stripe payment intent ID",
            "example": "pi_3NkXYZABCDEFGHIJKLMNOPQR"
          }
        },
        "required": [
          "paymentStatus"
        ]
      },
      "UpdateOrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "example": 2
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Order status",
            "example": "PENDING",
            "enum": [
              "draft",
              "pending",
              "processing",
              "shipped",
              "delivered",
              "cancelled",
              "expired"
            ]
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address",
            "example": "123 Main St, City, Country"
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateOrderItemDto"
            }
          }
        },
        "required": [
          "status",
          "shippingAddress",
          "items"
        ]
      }
    }
  }
}